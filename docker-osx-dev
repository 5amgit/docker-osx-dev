#!/bin/bash
# 
# A script for running a productive development environment with Docker 
# on OS X. See https://github.com/brikis98/docker-osx-dev for more info.

set -e

# Console colors
readonly COLOR_DEBUG='\033[1;36m'
readonly COLOR_INFO='\033[0;32m'
readonly COLOR_WARN='\033[1;33m'
readonly COLOR_ERROR='\033[0;31m'
readonly COLOR_INSTRUCTIONS='\033[0;37m'
readonly COLOR_END='\033[0m'

# Log levels 
readonly LOG_LEVEL_DEBUG="DEBUG"
readonly LOG_LEVEL_INFO="INFO"
readonly LOG_LEVEL_WARN="WARN"
readonly LOG_LEVEL_ERROR="ERROR"
readonly LOG_LEVEL_INSTRUCTIONS="INSTRUCTIONS"
readonly LOG_LEVELS=($LOG_LEVEL_DEBUG $LOG_LEVEL_INFO $LOG_LEVEL_WARN $LOG_LEVEL_ERROR $LOG_LEVEL_INSTRUCTIONS)
readonly DEFAULT_LOG_LEVEL="$LOG_LEVEL_INFO"
CURRENT_LOG_LEVEL="$DEFAULT_LOG_LEVEL"

# Boot2Docker constants
readonly DOCKER_HOST_NAME="dockerhost"
readonly BOOT2DOCKER_SSH_KEY=$(boot2docker cfg | grep "^SSHKey = " | sed -e 's/^SSHKey = "\(.*\)"/\1/')
readonly BOOT2DOCKER_REMOTE_SHELL_CMD="ssh -i $BOOT2DOCKER_SSH_KEY -o StrictHostKeyChecking=no"
readonly BOOT2DOCKER_USER="docker"
readonly BOOT2DOCKER_SSH_URL="$BOOT2DOCKER_USER@$DOCKER_HOST_NAME"

# docker-compose constants
readonly DOCKER_COMPOSE_FILE="docker-compose.yml"

# Sync and watch constants
readonly DEFAULT_PATHS_TO_SYNC=(".")
readonly DEFAULT_EXCLUDES=(".git")
readonly DEFAULT_IGNORE_FILE=".dockerignore"
readonly RSYNC_FLAGS=("archive" "verbose" "delete" "omit-dir-times" "inplace" "whole-file")
PATHS_TO_SYNC=()
EXCLUDES=()

# Helper function to log an INFO message. See the log function for details.
function log_info {
  log $COLOR_INFO $LOG_LEVEL_INFO "$@"
}

# Helper function to log a WARN message. See the log function for details.
function log_warn {
  log $COLOR_WARN $LOG_LEVEL_WARN "$@"
}

# Helper function to log a DEBUG message. See the log function for details.
function log_debug {
  log $COLOR_DEBUG $LOG_LEVEL_DEBUG "$@"
}

# Helper function to log an ERROR message. See the log function for details.
function log_error {
  log $COLOR_ERROR $LOG_LEVEL_ERROR "$@"
}

# Helper function to log an INSTRUCTIONS message. See the log function for details.
function log_instructions {
  log $COLOR_INSTRUCTIONS $LOG_LEVEL_INSTRUCTIONS "$@"
}

#
# Usage: index_of VALUE ARRAY
#
# Returns the first index where VALUE appears in ARRAY. If ARRAY does not
# contain VALUE, returns -1.
#
# Examples:
#
# index_of foo ("abc" "foo" "def")
#   Returns: 1
#
# index_of foo ("abc" "def")
#   Returns -1
#
function index_of {
  local readonly value="$1"
  shift
  local readonly array=("$@")

  for (( i = 0; i < ${#array[@]}; i++ )); do
    if [ "${array[$i]}" = "${value}" ]; then
      echo $i
      return
    fi
  done 

  echo -1
}

#
# Usage: log COLOR LEVEL [MESSAGE ...]
#
# Logs MESSAGE to stdout with color COLOR if the log level is at least LEVEL.
# If no MESSAGE is specified, reads from stdin. The log level is determined by 
# the DOCKER_OSX_DEV_LOG_LEVEL environment variable.
#
# Examples:
#
# log $COLOR_INFO $LOG_LEVEL_INFO "Hello, World"
#   Prints: "[INFO] Hello, World" to stdout in green.
#
# echo "Hello, World" | log $COLOR_RED $LOG_LEVEL_ERROR 
#   Prints: "[ERROR] Hello, World" to stdout in red.
#
function log {
  if [[ "$#" -gt 2 ]]; then
    do_log "$@"
  elif [[ "$#" -eq 2 ]]; then
    while read message; do 
      do_log "$1" "$2" "$message"
    done
  else
    echo "Internal error: invalid number of arguments passed to log function: $@"
    exit 1
  fi
}

#
# Usage: do_log COLOR LEVEL MESSAGE ...
#
# Logs MESSAGE to stdout with color COLOR if the log level is at least LEVEL.
# The log level is determined by the DOCKER_OSX_DEV_LOG_LEVEL environment 
# variable.
#
# Examples:
#
# do_log $COLOR_INFO $LOG_LEVEL_INFO "Hello, World"
#   Prints: "[INFO] Hello, World" to stdout in green.
#
function do_log {
  local readonly color="$1"
  shift
  local readonly log_level="$1"
  shift
  local readonly message="$@"

  local readonly log_level_index=$(index_of "$log_level" "${LOG_LEVELS[@]}")
  local readonly current_log_level_index=$(index_of "$CURRENT_LOG_LEVEL" "${LOG_LEVELS[@]}")

  if [[ "$log_level_index" -ge "$current_log_level_index" ]]; then
    echo -e "${color}[${log_level}] ${message}${COLOR_END}"
  fi   
}

#
# Usage: find_path_to_sync_parent PATH
#
# Finds the parent folder of PATH from the PATHS_TO_SYNC global variable. When
# using rsync, we want to sync the exact folders the user specified when 
# running the docker-osx-dev script. However, when we we use fswatch, it gives
# us the path of files that changed, which may be deeply nested inside one of 
# the folders we're supposed to keep in sync. Therefore, this function lets us
# transform one of these nested paths back to one of the top level rsync paths.
#
function find_path_to_sync_parent {
  local readonly path="$1"
  local readonly normalized_path=$(greadlink -m "$path")

  for path_to_sync in "${PATHS_TO_SYNC[@]}"; do
    if [[ "$normalized_path" == $path_to_sync* ]]; then
      echo "$path_to_sync"
      return
    fi
  done
}

#
# Usage: rsync PATH
# 
# Uses rsync to sync PATH to the same PATH on the Boot2Docker VM.
#
# Examples:
#
# rsync /foo
#   Result: the contents of /foo are rsync'ed to /foo on the Boot2Docker VM
#
function do_rsync {
  local readonly path="$1"
  local readonly path_to_sync=$(find_path_to_sync_parent "$path")
  local readonly parent_folder=$(dirname "$path_to_sync")

  local readonly flags="${RSYNC_FLAGS[@]/#/--}"
  local readonly excludes="${EXCLUDES[@]/#/--exclude }"
  local readonly rsh_flag="--rsh=\"$BOOT2DOCKER_REMOTE_SHELL_CMD\""

  # Used to ensure all the parent directories exist before rsyncing  
  # http://www.schwertly.com/2013/07/forcing-rsync-to-create-a-remote-path-using-rsync-path/
  local readonly rsync_path="--rsync-path=\"sudo mkdir -p $parent_folder && sudo chown -R $BOOT2DOCKER_USER $parent_folder && rsync\""

  local readonly rsync_cmd="rsync $flags $excludes $rsh_flag $rsync_path $path_to_sync $BOOT2DOCKER_SSH_URL:$parent_folder"
  log_debug "$rsync_cmd"

  eval "$rsync_cmd" 2>&1 | log_debug
}

#
# Usage: sync [PATHS ...]
#
# Uses rsync to sync PATHS to the Boot2Docker VM. If one of the values in PATHS
# is not valid (e.g. doesn't exist), it will be ignored.
#
# Examples:
#
# rsync /foo /bar
#   Result: /foo and /bar are rsync'ed to the Boot2DockerVM
#
function sync {
  local readonly paths_to_sync=("$@")

  for path in "${paths_to_sync[@]}"; do
    do_rsync "$path"
  done
}

#
# Usage: watch
#
# Watches the paths in the global variable PATHS_TO_SYNC for changes and rsyncs
# any files that changed.
#
function watch {
  log_info "Watching: ${PATHS_TO_SYNC[@]}"

  local readonly excludes="${EXCLUDES[@]/#/--exclude }"
  local readonly fswatch_cmd="fswatch -0 $excludes ${PATHS_TO_SYNC[@]}"
  log_debug "$fswatch_cmd"

  eval "$fswatch_cmd" | while read -d "" file
  do
    log_info "Detected change in $file"
    sync "$file"
  done  
}

#
# Usage: watch_and_sync
#
# Syncs the paths in the global variable PATHS_TO_SYNC. Kicks off a file watcher
# that will keep those paths in sync.
#
function watch_and_sync {
  sync "${PATHS_TO_SYNC[@]}"
  watch
}

#
# Usage: instructions
#
# Prints the usage instructions for this script to stdout.
# 
function instructions {
  echo -e "Usage: docker-osx-dev [-s PATH] [-e PATH] [-l LOG_LEVEL] [-c COMPOSE_FILE] [-i IGNORE_FILE] [-h]"
  echo -e 
  echo -e "Options, if supplied, have the following meanings:" 
  echo -e 
  echo -e "-s PATH\t\t\tSync PATH to the Boot2Docker VM. No wildcards allowed. May be specified multiple times. Default: ${DEFAULT_PATHS_TO_SYNC[@]}"
  echo -e "-e PATH\t\t\tExclude PATH while syncing. Wildcards are allowed, but make sure to quote them. May be specified multiple times. Default: ${DEFAULT_EXCLUDES[@]}"
  echo -e "-c COMPOSE_FILE\t\tRead in this docker-compose file and sync any volumes within it. Default: $DOCKER_COMPOSE_FILE"
  echo -e "-c IGNORE_FILE\t\tRead in this ignore file and exclude any paths within it while syncing. Default: $DEFAULT_IGNORE_FILE"
  echo -e "-l LOG_LEVEL\t\tSpecify the logging level. One of: ${LOG_LEVELS[@]}. Default: ${DEFAULT_LOG_LEVEL}"
  echo -e "-h\t\t\tPrint this help text."
  echo -e 
  echo -e "Overview:"
  echo -e 
  echo -e "docker-osx-dev is a script you can use to sync folders to the Boot2Docker VM using rsync."
  echo -e "It's an alternative to using VirtualBox shared folders, which are agonizingly slow and break file watchers."
  echo -e "For more info, see: https://github.com/brikis98/docker-osx-dev"
  echo -e
  echo -e "Example workflow:"
  echo -e 
  echo -e "\t> docker-osx-dev -s /host-folder"
  echo -e "\t> docker run -v /host-folder:/guest-folder some-docker-image"
  echo -e 
  echo -e "After you run the commands above, /host-folder on OS X will be kept in sync with /guest-folder in some-docker-image."
  echo -e 
}

#
# Usage: load_paths_from_docker_compose DOCKER_COMPOSE_FILE
#
# Parses out all volumes: entries from the docker-compose file 
# DOCKER_COMPOSE_FILE. This is a very hacky function that just uses regex
# instead of a proper yaml parser. If it proves to be fragile, it will need to
# be replaced.
#
function load_paths_from_docker_compose {
  local readonly yaml_file_path="$1"

  local in_volumes_block=false
  local paths=()
  while read line; do
    if $in_volumes_block; then
      if [[ "${line:0:2}" = "- " ]]; then
        local readonly path=$(echo $line | sed -e "s/- \(.*\):.*$/\1/")
        paths+=("$path")
      else
        in_volumes_block=false
      fi
    else
      if [[ "$line" = "volumes:" ]]; then
        in_volumes_block=true
      fi
    fi
  done < "$yaml_file_path"

  echo "${paths[@]}"
}

function load_ignore_paths {
  local readonly ignore_file="$1"

  local paths=()
  while read line; do
    if [[ "${line:0:1}" != "#" ]]; then
      paths+=("$line")
    fi
  done < "$ignore_file"

  echo "${paths[@]}"
}

#
# Usage handle_command ARGS ...
#
# Parses ARGS to kick off this script. See the output of the instructions 
# function for details.
#
function handle_command {
  local paths_to_sync=()
  local excludes=()  
  local docker_compose_file=""
  local docker_compose_paths=()
  local ignore_file=""
  local ignore_paths=()

  while getopts ":s::e::c::l::i::h" opt; do
    case "$opt" in
      s)
        paths_to_sync+=("$OPTARG")
        ;;
      e)
        excludes+=("$OPTARG")
        ;;
      c)
        docker_compose_file="$OPTARG"
        ;;
      i)
        ignore_file="$OPTARG"
        ;;
      l)
        local readonly level="$OPTARG"
        local readonly index=$(index_of "$level" "${LOG_LEVELS[@]}")
        if [[ "$index" -ge 0 ]]; then
          CURRENT_LOG_LEVEL="$level"
        else
          log_error "Invalid log level specified: $level"
          instructions
          exit 1
        fi
        ;;
      h)
        instructions
        exit 0
        ;;
      :)
        log_error "Option -$OPTARG requires an argument"
        instructions
        exit 1
        ;;
      \?) 
        log_error "Invalid option: -$OPTARG"
        instructions
        exit 1
        ;;
    esac
  done

  if [[ -z "$docker_compose_file" ]]; then
    docker_compose_file="$DOCKER_COMPOSE_FILE"
  fi

  if [[ -f "$docker_compose_file" ]]; then
    docker_compose_paths=($(load_paths_from_docker_compose "$docker_compose_file"))
  fi

  if [[ "${#docker_compose_paths}" -gt 0 ]]; then
    log_info "Syncing paths from Docker Compose file at $docker_compose_file"
    paths_to_sync=("${docker_compose_paths[@]}")
  elif [[ "${#paths_to_sync[@]}" -eq 0 ]]; then
    log_debug "Using default sync paths"
    paths_to_sync=("${DEFAULT_PATHS_TO_SYNC[@]}")
  else
    log_debug "Using sync paths from command line args"
  fi
  
  for path in "${paths_to_sync[@]}"; do
    local normalized_path=$(greadlink -m "$path")
    PATHS_TO_SYNC+=("$normalized_path")
  done

  if [[ -z "$ignore_file" ]]; then
    ignore_file="$DEFAULT_IGNORE_FILE"
  fi

  if [[ -f "$ignore_file" ]]; then
    ignore_paths=($(load_ignore_paths "$ignore_file"))
  fi

  if [[ "${#ignore_paths}" -gt 0 ]]; then
    log_info "Using excludes from $ignore_file"
    EXCLUDES=("${ignore_paths[@]}")
  elif [[ "${#excludes[@]}" -eq 0 ]]; then
    log_debug "Using default exclude paths"
    EXCLUDES=("${DEFAULT_EXCLUDES[@]}")    
  else
    log_debug "Using exclude paths from command line args"
    EXCLUDES=("${excludes[@]}")
  fi

  watch_and_sync
}

handle_command "$@"